[core]
# The home folder for airflow, default is ~/airflow
airflow_home = /usr/local/airflow

# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository
dags_folder = /usr/local/airflow/dags

# The folder where airflow should store its log files.
base_log_folder = /usr/local/airflow/logs

# https://github.com/apache/airflow/blob/master/docs/howto/write-logs.rst
remote_logging = True
#remote_base_log_folder = ENVRIONMENT VARIABLE
#remote_log_conn_id = ENVRIONMENT VARIABLE
#encrypt_s3_logs = ENVRIONMENT VARIABLE

# Logging level
logging_level = DEBUG
fab_logging_level = WARN

# Logging class
# Specify the class that will specify the logging configuration
# This class has to be on the python classpath
# logging_config_class = my.path.default_local_settings.LOGGING_CONFIG
logging_config_class =

# Log format
log_format = [%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s
simple_log_format = %%(asctime)s %%(levelname)s - %%(message)s

# Log filename format
#log_filename_template = {{{{ ti.dag_id }}}}/{{{{ ti.task_id }}}}/{{{{ ts }}}}/{{{{ try_number }}}}.log
#log_processor_filename_template = {{{{ filename }}}}.log
#dag_processor_manager_log_location = {AIRFLOW_HOME}/logs/dag_processor_manager/dag_processor_manager.log

# Hostname by providing a path to a callable, which will resolve the hostname
#hostname_callable = socket:getfqdn

# Default timezone in case supplied date times are naive
# can be utc (default), system, or any IANA timezone string (e.g. Europe/Amsterdam)
default_timezone = utc

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor
#executor = LocalExecutor
executor = KubernetesExecutor

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
#sql_alchemy_conn = ENVIRONMENT VARIABLE

# The encoding for the databases
sql_engine_encoding = utf-8

# The SqlAlchemy pool size is the maximum number of database connections
# in the pool.
# TODO:  Does this affect our max concurrency?
sql_alchemy_pool_size = 32

# The SqlAlchemy pool recycle is the number of seconds a connection
# can be idle in the pool before it is invalidated. This config does
# not apply to sqlite.
sql_alchemy_pool_recycle = 3600

# How many seconds to retry re-establishing a DB connection after
# disconnects. Setting this to 0 disables retries.
sql_alchemy_reconnect_timeout = 300

# The schema to use for the metadata database
# SqlAlchemy supports databases with the concept of multiple schemas.
sql_alchemy_schema =

# The amount of parallelism as a setting to the executor. This defines
# the max number of task instances that should run simultaneously
# on this airflow installation
parallelism = 128

# The number of task instances allowed to run concurrently by the scheduler
dag_concurrency = 128

# Are DAGs paused by default at creation
dags_are_paused_at_creation = True

# The maximum number of active DAG runs per DAG
max_active_runs_per_dag = 128

load_examples = False

# Where your Airflow plugins are stored
plugins_folder = /usr/local/airflow/plugins

# Secret key to save connection passwords in the db
#fernet_key = ENVRIONMENT VARIABLE

# Whether to disable pickling dags
donot_pickle = False

# How long before timing out a python file import while filling the DagBag
# Increased this from 60 due to dag_id could not be found errors
dagbag_import_timeout = 180

# The class to use for running task instances in a subprocess
task_runner = StandardTaskRunner

# If set, tasks without a `run_as_user` argument will be run with this user
# Can be used to de-elevate a sudo user running Airflow when executing tasks
default_impersonation =

# What security module to use (for example kerberos):
security =

# If set to False enables some unsecure features like Charts and Ad Hoc Queries.
# In 2.0 will default to True.
secure_mode = False

# Turn unit test mode on (overwrites many configuration options with test
# values at runtime)
unit_test_mode = False

# Name of handler to read task instance logs.
# Default to use task handler.
task_log_reader = task

# Whether to enable pickling for xcom (note that this is insecure and allows for
# RCE exploits). This will be deprecated in Airflow 2.0 (be forced to False).
enable_xcom_pickling = True

# When a task is killed forcefully, this is the amount of time in seconds that
# it has to cleanup after it is sent a SIGTERM, before it is SIGKILLED
killed_task_cleanup_time = 60

# Whether to override params with dag_run.conf. If you pass some key-value pairs through `airflow backfill -c` or
# `airflow trigger_dag -c`, the key-value pairs will override the existing ones in params.
dag_run_conf_overrides_params = False

# Worker initialisation check to validate Metadata Database connection
worker_precheck = False

[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = http://localhost:8080

# The ip specified when starting the web server
web_server_host = 0.0.0.0

# The port on which to run the web server
web_server_port = 8080

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
web_server_ssl_cert =
web_server_ssl_key =

# Number of seconds the webserver waits before killing gunicorn master that doesn't respond
web_server_master_timeout = 120

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = 120

# Number of workers to refresh at a time. When set to 0, worker refresh is
# disabled. When nonzero, airflow periodically refreshes webserver workers by
# bringing up new ones and killing old ones.
worker_refresh_batch_size = 1

# Number of seconds to wait before refreshing a batch of workers.
worker_refresh_interval = 30

# Secret key used to run your flask app
# It should be as random as possible
secret_key = {SECRET_KEY}

# Number of workers to run the Gunicorn web server
workers = 4

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = sync

# Log files for the gunicorn webserver. '-' means log to stderr.
access_logfile = -
error_logfile = -

# Expose the configuration file in the web server
# This is only applicable for the flask-admin based web UI (non FAB-based).
# In the FAB-based web UI with RBAC feature,
# access to configuration is controlled by role permissions.
expose_config = True

# Set to true to turn on authentication:
# https://airflow.apache.org/security.html#web-authentication
authenticate = False
rbac = False

# Filter the list of dags by owner name (requires authentication to be enabled)
filter_by_owner = False

# Filtering mode. Choices include user (default) and ldapgroup.
# Ldap group filtering requires using the ldap backend
#
# Note that the ldap server needs the "memberOf" overlay to be set up
# in order to user the ldapgroup mode.
owner_mode = user

# Default DAG view.  Valid values are:
# tree, graph, duration, gantt, landing_times
dag_default_view = tree

# Default DAG orientation. Valid values are:
# LR (Left->Right), TB (Top->Bottom), RL (Right->Left), BT (Bottom->Top)
dag_orientation = LR

# Puts the webserver in demonstration mode; blurs the names of Operators for
# privacy.
demo_mode = False

# The amount of time (in secs) webserver will wait for initial handshake
# while fetching logs from other worker machine
log_fetch_timeout_sec = 5

# By default, the webserver shows paused DAGs. Flip this to hide paused
# DAGs by default
hide_paused_dags_by_default = False

# Consistent page size across all listing views in the UI
page_size = 100

# Define the color of navigation bar
navbar_color = #007A87

# Default dagrun to show in UI
default_dag_run_display_number = 25

# Enable werkzeug `ProxyFix` middleware
enable_proxy_fix = False

[aws_default]
aws_default_region = us-east-1

[email]
email_backend = airflow.utils.email.send_email_smtp

[smtp]
# If you want airflow to send emails on retries, failure, and you want to
# the airflow.utils.send_email function, you have to configure an smtp
# server here
smtp_host = localhost
smtp_starttls = True
smtp_ssl = False
smtp_user = airflow
smtp_port = 25
smtp_password = airflow
smtp_mail_from = airflow@airflow.local


[scheduler]
# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
job_heartbeat_sec = 5

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
#
# We increased this value from 5 to 60 in an attempt to reduce airflow
# scheduling latency.
#
scheduler_heartbeat_sec = 60

# after how much time (seconds) a new DAGs should be picked up from the filesystem
min_file_process_interval = 0

# How often (in seconds) to scan the DAGs directory for new files. Default to 5 minutes.
dag_dir_list_interval = 300

# How often should stats be printed to the logs
print_stats_interval = 30

# If the last scheduler heartbeat happened more than scheduler_health_check_threshold ago (in seconds),
# scheduler is considered unhealthy.
# This is used by the health check in the "/health" endpoint
scheduler_health_check_threshold = 30

child_process_log_directory = /usr/local/airflow/logs/scheduler

# Local task jobs periodically heartbeat to the DB. If the job has
# not heartbeat in this many seconds, the scheduler will mark the
# associated task instance as failed and will re-schedule the task.
scheduler_zombie_task_threshold = 300

# Turn off scheduler catchup by setting this to False.
# Default behavior is unchanged and
# Command Line Backfills still work, but the scheduler
# will not do scheduler catchup if this is False,
# however it can be set on a per DAG basis in the
# DAG definition (catchup)
catchup_by_default = True

# This changes the batch size of queries in the scheduling main loop.
# If this is too high, SQL query performance may be impacted by one
# or more of the following:
#  - reversion to full table scan
#  - complexity of query predicate
#  - excessive locking
#
# Additionally, you may hit the maximum allowable query length for your db.
#
# Set this to 0 for no limit (not advised)
max_tis_per_query = 512

# Statsd (https://github.com/etsy/statsd) integration settings
#statsd_on = False
#statsd_host = localhost
#statsd_port = 8125
#statsd_prefix = airflow

# The scheduler can run multiple threads in parallel to schedule dags.
# This defines how many threads will run.
max_threads = 8

authenticate = False

# Turn off scheduler use of cron intervals by setting this to False.
# DAGs submitted manually in the web UI or with trigger_dag will still run.
use_job_schedule = True


[kubernetes]
worker_container_repository = 772681551441.dkr.ecr.us-east-1.amazonaws.com/security-token-analytics
worker_container_tag = latest
worker_container_image_pull_policy = Always
worker_dags_folder = /usr/local/airflow/dags

# If True (default), worker pods will be deleted upon termination
delete_worker_pods = True

# The Kubernetes namespace where airflow workers should be created. Defaults to `default`
namespace = default

# The name of the Kubernetes ConfigMap Containing the Airflow Configuration (this file)
#airflow_configmap = /usr/local/airflow/airflow.cfg
airflow_configmap =

# For docker image already contains DAGs, this is set to `True`, and the worker will search for dags in dags_folder,
# otherwise use git sync or dags volume claim to mount DAGs
dags_in_image = True

# The name of the Kubernetes service account to be associated with airflow workers, if any.
# Service accounts are required for workers that require access to secrets or cluster resources.
# See the Kubernetes RBAC documentation for more:
#   https://kubernetes.io/docs/admin/authorization/rbac/
worker_service_account_name = default

# Any image pull secrets to be given to worker pods, If more than one secret is
# required, provide a comma separated list: secret_a,secret_b
image_pull_secrets =

# Use the service account kubernetes gives to pods to connect to kubernetes cluster.
# It's intended for clients that expect to be running inside a pod running on kubernetes.
# It will raise an exception if called from a process not running in a kubernetes environment.
in_cluster = True

[kubernetes_node_selectors]
# The Key-value pairs to be given to worker pods.
# The worker pods will be scheduled to the nodes of the specified key-value pairs.
# Should be supplied in the format: key = value

[kubernetes_secrets]
# The scheduler mounts the following secrets into your workers as they are launched by the
# scheduler. You may define as many secrets as needed and the kubernetes launcher will parse the
# defined secrets and mount them as secret environment variables in the launched workers.

# Airflow settings
AIRFLOW__CORE__AIRFLOW_HOME = prod-airflow=AIRFLOW__CORE__AIRFLOW_HOME
AIRFLOW__CORE__DAGS_FOLDER = prod-airflow=AIRFLOW__CORE__DAGS_FOLDER
AIRFLOW__CORE__FERNET_KEY = prod-airflow=AIRFLOW__CORE__FERNET_KEY
AIRFLOW__CORE__REMOTE_LOG_CONN_ID = prod-airflow=AIRFLOW__CORE__REMOTE_LOG_CONN_ID
AIRFLOW__CORE__REMOTE_BASE_LOG_FOLDER = prod-airflow=AIRFLOW__CORE__REMOTE_BASE_LOG_FOLDER
AIRFLOW__CORE__ENCRYPT_S3_LOGS = prod-airflow=AIRFLOW__CORE__ENCRYPT_S3_LOGS
AIRFLOW__CORE__SQL_ALCHEMY_CONN = prod-airflow=AIRFLOW__CORE__SQL_ALCHEMY_CONN
AIRFLOW__KUBERNETES__DAGS_IN_IMAGE = prod-airflow=AIRFLOW__KUBERNETES__DAGS_IN_IMAGE
AIRFLOW_CONN_AWS_DEFAULT = prod-airflow=AIRFLOW_CONN_AWS_DEFAULT


# ethereum-etl env vars
CLOUD_PROVIDER = prod-airflow=CLOUD_PROVIDER
OUTPUT_BUCKET = prod-airflow=OUTPUT_BUCKET
AWS_ACCESS_KEY_ID = prod-airflow=AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = prod-airflow=AWS_SECRET_ACCESS_KEY
DAGS_FOLDER = prod-airflow=DAGS_FOLDER
REDSHIFT_SQL_FOLDER = prod-airflow=REDSHIFT_SQL_FOLDER
EXPORT_BLOCKS_AND_TRANSACTIONS = prod-airflow=EXPORT_BLOCKS_AND_TRANSACTIONS
EXPORT_RECEIPTS_AND_LOGS = prod-airflow=EXPORT_RECEIPTS_AND_LOGS
EXTRACT_TOKEN_TRANSFERS = prod-airflow=EXTRACT_TOKEN_TRANSFERS
EXPORT_CONTRACTS = prod-airflow=EXPORT_CONTRACTS
EXPORT_TOKENS = prod-airflow=EXPORT_TOKENS
EXPORT_TRACES = prod-airflow=EXPORT_TRACES
NOTIFICATION_EMAILS = prod-airflow=NOTIFICATION_EMAILS
EXPORT_MAX_WORKERS = prod-airflow=EXPORT_MAX_WORKERS
EXPORT_BATCH_SIZE = prod-airflow=EXPORT_BATCH_SIZE
WEB3_PROVIDER_URI_BACKUP = prod-airflow=WEB3_PROVIDER_URI_BACKUP
WEB3_PROVIDER_URI_ARCHIVAL = prod-airflow=WEB3_PROVIDER_URI_ARCHIVAL
DESTINATION_DATASET_PROJECT_ID = prod-airflow=DESTINATION_DATASET_PROJECT_ID